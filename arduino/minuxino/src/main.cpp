#include <Arduino.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET     -1
#define SCREEN_ADDRESS 0x3C

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

unsigned long lastDemoTime = 0;
int demoIndex = 0;

// ===== DEMO CONFIGURATION STRUCT =====
struct Demo {
  bool enabled;
  unsigned long duration;
  const char* name;
  void (*function)();
};

// Forward declare demo functions
void demo_splash();
void demo_loadingBar();
void demo_fakeClock();
void demo_bouncingText();
void demo_eyes();
void demo_bitmap();
void demo_odometer();

// Demo configuration - easy to manage in one place!
Demo demos[] = {
  {false,  200,   "Splash",        demo_splash},
   {true,  100000, "Odometer",      demo_odometer},
  {true,  200,   "Loading Bar",   demo_loadingBar},
  {true,  5000,  "Fake Clock",    demo_fakeClock},
  {true,  4000,  "Bouncing Text", demo_bouncingText},
  {true,  5000,  "Eyes",          demo_eyes},
  {true,  4500,  "Bitmap",        demo_bitmap}
};

const int totalDemos = sizeof(demos) / sizeof(demos[0]);

// Get the next enabled demo index
int getNextEnabledDemo(int currentIndex) {
  int nextIndex = (currentIndex + 1) % totalDemos;
  
  // Find next enabled demo
  while (!demos[nextIndex].enabled && nextIndex != currentIndex) {
    nextIndex = (nextIndex + 1) % totalDemos;
  }
  
  return nextIndex;
}

// Helper function to get current demo properties
Demo& getCurrentDemo() {
  return demos[demoIndex];
}
// =======================================

unsigned long startMillis = 0;

const int ref_eye_height = 40;
const int ref_eye_width = 40;
const int ref_space_between_eye = 10;
const int ref_corner_radius = 10;
int left_eye_x, left_eye_y, right_eye_x, right_eye_y;
int left_eye_height, right_eye_height;
int left_eye_width, right_eye_width;

const uint8_t myBitmap[] PROGMEM ={
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xf0, 0x00, 0x07, 0xc1, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0x8f, 0xf0, 0x1c, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x01, 0x80, 0x7f, 0x70, 0x00, 0x06, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xc2, 0x07, 0xe0, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x60, 0x60, 0x00, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x30, 0x1c, 0x00, 0x49, 0x00, 0x00, 0x70, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x18, 0x06, 0x00, 0x08, 0x00, 0x0f, 0x81, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x08, 0x03, 0x01, 0x00, 0x7c, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x0c, 0x01, 0x3f, 0x00, 0x7e, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x06, 0x01, 0x7f, 0x80, 0xfe, 0x40, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x02, 0x01, 0x3f, 0x89, 0xfe, 0x40, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x03, 0x00, 0x3f, 0x91, 0xfe, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x01, 0xc0, 0x1f, 0x81, 0xf8, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x81, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x3c, 0x00, 0x00, 0x01, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0xc0, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0x3f, 0xff, 0xf0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0x1e, 0xe0, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0x80, 0x00, 0x01, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xc0, 0x00, 0x07, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xe0, 0x00, 0x1d, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0x98, 0x00, 0xcd, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0x8f, 0x81, 0x99, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0x4b, 0x9f, 0x19, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0x72, 0x68, 0x2c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0x92, 0x48, 0x4c, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xd0, 0x48, 0xdf, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0x7c, 0x09, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x01, 0xf8, 0x0b, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x60, 0x88, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x20, 0x88, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x20, 0x88, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x70, 0x88, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x60, 0x88, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x60, 0x88, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x78, 0xc8, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


// ---------------------------------------------------

void draw_eyes(bool update = true);
void center_eyes(bool update = true);
void blink();
void demo_splash();
void demo_eyes();
void demo_fakeClock();
void demo_bouncingText();
void demo_loadingBar();
void demo_bitmap();
void demo_odometer();

void draw_eyes(bool update) {
  display.clearDisplay();
  display.fillRoundRect(left_eye_x - left_eye_width / 2, left_eye_y - left_eye_height / 2,
                        left_eye_width, left_eye_height, ref_corner_radius, SSD1306_WHITE);
  display.fillRoundRect(right_eye_x - right_eye_width / 2, right_eye_y - right_eye_height / 2,
                        right_eye_width, right_eye_height, ref_corner_radius, SSD1306_WHITE);
  if (update) display.display();
}

void center_eyes(bool update) {
  left_eye_height = right_eye_height = ref_eye_height;
  left_eye_width = right_eye_width = ref_eye_width;
  left_eye_x = SCREEN_WIDTH / 2 - ref_eye_width / 2 - ref_space_between_eye / 2;
  right_eye_x = SCREEN_WIDTH / 2 + ref_eye_width / 2 + ref_space_between_eye / 2;
  left_eye_y = right_eye_y = SCREEN_HEIGHT / 2;
  if (update) draw_eyes();
}

void blink() {
  for (int i = 0; i < 3; i++) {
    left_eye_height -= 6;
    right_eye_height -= 6;
    draw_eyes();
    delay(40);
  }
  for (int i = 0; i < 3; i++) {
    left_eye_height += 6;
    right_eye_height += 6;
    draw_eyes();
    delay(40);
  }
}

void demo_splash() {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(15, 25);
  display.println("minux.io");
  display.display();
}

void demo_eyes() {
  center_eyes();
  draw_eyes();
  blink();
}

void demo_fakeClock() {
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(15, 10);

  unsigned long elapsed = (millis() - startMillis) / 1000;
  int h = (elapsed / 3600) % 24;
  int m = (elapsed / 60) % 60;
  int s = elapsed % 60;

  char buffer[9];
  sprintf(buffer, "%02d:%02d:%02d", h, m, s);
  display.println(buffer);

  display.setTextSize(1);
  display.setCursor(20, 42);
  display.println("Los Angeles, CA");
  display.display();
}

void demo_bouncingText() {
  static int x = 0;
  static int dir = 1;
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(x, SCREEN_HEIGHT / 2);
  display.print("Ohm's Revenge");
  display.display();

  x += dir * 3;
  if (x <= 0 || x >= SCREEN_WIDTH - 60) dir *= -1;
}

void demo_loadingBar() {
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 5);
  display.println("Loading...");
  int barWidth = (millis() / 10) % (SCREEN_WIDTH - 20);
  display.drawRect(10, 30, SCREEN_WIDTH - 20, 10, SSD1306_WHITE);
  display.fillRect(10, 30, barWidth, 10, SSD1306_WHITE);
  display.display();
}

void demo_bitmap() {
  display.clearDisplay();
  display.drawBitmap(0, 0, myBitmap, 128, 64, SSD1306_WHITE);
  display.display();
}

void demo_odometer() {
  static unsigned long odometerStartTime = 0;
  static float distance = 0.0;
  static int batteryLevel = 100;
  static int currentState = 0;
  static float speed = 0.0;
  
  if (odometerStartTime == 0) {
    odometerStartTime = millis();
  }
  
  unsigned long elapsed = millis() - odometerStartTime;
  
  // Cycle through different states every 3 seconds for better visibility
  currentState = (elapsed / 3000) % 5;
  
  display.clearDisplay();
  
  // ===== DASHBOARD CARD DESIGN =====
  
  // Main card border with rounded corners effect
  display.drawRect(2, 2, 124, 60, SSD1306_WHITE);
  display.drawRect(3, 3, 122, 58, SSD1306_WHITE);
  
  // Header section with title
  display.fillRect(4, 4, 120, 12, SSD1306_WHITE);
  display.setTextSize(1);
  display.setTextColor(SSD1306_BLACK);
  display.setCursor(6, 6);
  display.println("Ohm's Revenge Dashboard");
  
  // Reset text color for rest of display
  display.setTextColor(SSD1306_WHITE);
  
  // Top metrics row (Distance and Battery)
  display.setCursor(6, 20);
  display.setTextSize(1);
  distance += 0.03; // Simulate movement
  display.print("DIST: ");
  display.print(distance, 1);
  display.print("m");
  
  // Battery with visual indicator
  if (elapsed % 800 == 0 && batteryLevel > 15) {
    batteryLevel--;
  }
  display.setCursor(75, 20);
  display.print("BAT:");
  display.print(batteryLevel);
  display.print("%");
  
  // Battery visual bar
  int batBarWidth = map(batteryLevel, 0, 100, 0, 20);
  display.drawRect(105, 19, 22, 8, SSD1306_WHITE);
  display.fillRect(106, 20, batBarWidth, 6, SSD1306_WHITE);
  
  // Speed gauge section
  display.setCursor(6, 32);
  display.print("SPEED: ");
  
  // State-dependent information
  switch(currentState) {
    case 0: // Following path
      speed = 15.0;
      display.print(speed, 0);
      display.println(" cm/s");
      
      display.setCursor(6, 44);
      display.println("STATUS: [FOLLOWING PATH]");
      display.setCursor(6, 54);
      display.println(">>> SENSORS: ALL CLEAR <<<");
      
      // Path visualization - animated dotted line
      for(int i = (elapsed/100) % 16; i < 120; i += 16) {
        display.fillRect(i + 6, 30, 4, 1, SSD1306_WHITE);
      }
      break;
      
    case 1: // Obstacle detected
      speed = 0.0;
      display.print(speed, 0);
      display.println(" cm/s");
      
      display.setCursor(6, 44);
      display.println("STATUS: [OBSTACLE ALERT]");
      display.setCursor(6, 54);
      display.println("!!! ULTRASONIC: 5CM !!!");
      
      // Warning blink effect
      if ((elapsed / 200) % 2) {
        display.fillRect(6, 42, 115, 8, SSD1306_WHITE);
        display.setTextColor(SSD1306_BLACK);
        display.setCursor(6, 44);
        display.println("STATUS: [OBSTACLE ALERT]");
        display.setTextColor(SSD1306_WHITE);
      }
      
      // Danger indicators
      display.fillCircle(115, 25, 2, SSD1306_WHITE);
      display.fillCircle(115, 35, 2, SSD1306_WHITE);
      break;
      
    case 2: // Path lost - searching
      speed = 3.0;
      display.print(speed, 0);
      display.println(" cm/s");
      
      display.setCursor(6, 44);
      display.println("STATUS: [SEARCH MODE]");
      display.setCursor(6, 54);
      display.println("??? LINE SENSORS LOST ???");
      
      // Scanning animation
      int scanPos = 6 + ((elapsed / 50) % 110);
      display.drawLine(scanPos, 29, scanPos + 3, 29, SSD1306_WHITE);
      display.drawLine(scanPos - 1, 30, scanPos + 4, 30, SSD1306_WHITE);
      break;
      
    case 3: // Sharp turn maneuver
      speed = 8.0;
      display.print(speed, 0);
      display.println(" cm/s");
      
      display.setCursor(6, 44);
      display.println("STATUS: [NAVIGATION]");
      display.setCursor(6, 54);
      display.println("<<< EXECUTING TURN <<<");
      
      // Turn indicator with arrow
      display.drawLine(6, 32, 15, 28, SSD1306_WHITE);
      display.drawLine(15, 28, 12, 30, SSD1306_WHITE);
      display.drawLine(15, 28, 13, 32, SSD1306_WHITE);
      
      // Speed bars
      for(int i = 0; i < 3; i++) {
        display.fillRect(50 + (i * 8), 32 - (i * 2), 4, 4 + (i * 2), SSD1306_WHITE);
      }
      break;
      
    case 4: // Mission accomplished
      speed = 0.0;
      display.print(speed, 0);
      display.println(" cm/s");
      
      display.setCursor(6, 44);
      display.println("STATUS: [MISSION DONE]");
      display.setCursor(6, 54);
      display.println("*** TARGET ACQUIRED ***");
      
      // Success checkmark animation
      if ((elapsed / 300) % 2) {
        display.drawLine(100, 32, 105, 37, SSD1306_WHITE);
        display.drawLine(105, 37, 115, 27, SSD1306_WHITE);
        display.drawLine(101, 32, 106, 37, SSD1306_WHITE);
        display.drawLine(106, 37, 116, 27, SSD1306_WHITE);
      }
      
      // Victory pattern
      for(int i = 0; i < 5; i++) {
        display.drawPixel(90 + (i * 8), 30 + (i % 2 * 3), SSD1306_WHITE);
      }
      break;
  }
  
  // Speed gauge visual (right side)
  int speedBarHeight = map((int)speed, 0, 20, 0, 15);
  display.drawRect(118, 31, 6, 17, SSD1306_WHITE);
  if (speedBarHeight > 0) {
    display.fillRect(119, 48 - speedBarHeight, 4, speedBarHeight, SSD1306_WHITE);
  }
  
  // Status LED simulation (top right corner)
  if (currentState == 0) { // Green equivalent - solid fill
    display.fillCircle(120, 8, 2, SSD1306_WHITE);
  } else if (currentState == 1) { // Red equivalent - blinking
    if ((elapsed / 150) % 2) {
      display.fillCircle(120, 8, 2, SSD1306_WHITE);
    }
  } else { // Yellow equivalent - slower blink
    if ((elapsed / 400) % 2) {
      display.fillCircle(120, 8, 2, SSD1306_WHITE);
    }
  }
  
  // Reset for next cycle if we've completed all states
  if (elapsed >= 15000) { // Increased to 15 seconds for better viewing
    odometerStartTime = millis();
    distance = 0.0;
    batteryLevel = 100;
  }
  
  display.display();
}

void setup() {
  display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS);
  display.clearDisplay();
  display.setTextColor(SSD1306_WHITE);
  display.setTextSize(2);
  display.setCursor(15, 25);
  display.println("minux.io");
  display.display();
  delay(500); // Show splash

  startMillis = millis();
  lastDemoTime = millis();
}

void loop() {
  Demo& currentDemo = getCurrentDemo();
  
  // Check if current demo is enabled, if not skip to next enabled demo
  if (!currentDemo.enabled) {
    demoIndex = getNextEnabledDemo(demoIndex);
    lastDemoTime = millis();
    return;
  }
  
  if (millis() - lastDemoTime >= currentDemo.duration) {
    demoIndex = getNextEnabledDemo(demoIndex);
    lastDemoTime = millis();
  }

  // Run the current demo function
  currentDemo.function();
}
